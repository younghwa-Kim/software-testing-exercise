# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lift as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = False
    float_0 = 2098.791135
    lift_0 = module_0.Lift(float_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_capacity()
    assert var_0 == 10
    var_1 = lift_0.call(bool_0)
    var_2 = lift_0.add_riders(bool_0)
    var_1.go_down()


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = False
    float_0 = 2098.791135
    lift_0 = module_0.Lift(float_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_capacity()
    assert var_0 == 10
    var_1 = lift_0.go_up()
    assert lift_0.current_floor == 1
    var_2 = lift_0.add_riders(bool_0)
    var_1.go_down()


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = -1579.0
    lift_0 = module_0.Lift(float_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.go_up()
    var_0.add_riders(float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xe1\x1e\x9fN=I\x87\x99\xf07\xec~\xd8\x97\xc5\x16\xe0~\xc5W"
    lift_0 = module_0.Lift(bytes_0, bytes_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.go_down()
    var_1 = lift_0.get_current_floor()
    assert var_1 == 0
    var_1.get_num_riders()


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = False
    lift_0 = module_0.Lift(bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.call(bool_0)
    var_0.call(bool_0)


def test_case_5():
    tuple_0 = ()
    lift_0 = module_0.Lift(tuple_0, tuple_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    lift_0 = module_0.Lift(none_type_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_top_floor()
    var_0.get_current_floor()


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = -2012
    lift_0 = module_0.Lift(int_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_current_floor()
    assert var_0 == 0
    var_0.get_current_floor()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = True
    lift_0 = module_0.Lift(bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_capacity()
    assert var_0 == 10
    var_0.is_full()


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\xca\x8bJ\xc1\x94\xa0h1H\xd5\x85\x1b"
    lift_0 = module_0.Lift(bytes_0, bytes_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_num_riders()
    assert var_0 == 0
    var_0.get_current_floor()


@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    bytes_0 = b")\x1c\xf5\xb44\xdbE'\"\xb2\xf3T`\xbf"
    lift_0 = module_0.Lift(bytes_0, list_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.is_full()
    assert var_0 is False
    var_0.get_num_riders()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = True
    bool_1 = False
    none_type_0 = None
    lift_0 = module_0.Lift(bool_1, none_type_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.call(bool_0)
    var_0.get_current_floor()


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    float_0 = 2098.791135
    lift_0 = module_0.Lift(float_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_capacity()
    assert var_0 == 10
    var_1 = lift_0.call(bool_0)
    assert lift_0.current_floor == 1
    var_2 = lift_0.go_up()
    assert lift_0.current_floor == 2
    var_1.add_riders(var_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    float_0 = 2098.791135
    lift_0 = module_0.Lift(float_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.add_riders(float_0)
    assert lift_0.num_riders == 10
    var_1 = lift_0.call(bool_0)
    assert lift_0.current_floor == 1
    var_2 = lift_0.go_up()
    assert lift_0.current_floor == 2
    module_1.object(*var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    float_0 = 2098.791135
    lift_0 = module_0.Lift(float_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_capacity()
    assert var_0 == 10
    var_1 = lift_0.call(var_0)
    assert lift_0.current_floor == 10
    var_2 = lift_0.go_up()
    assert lift_0.current_floor == 11
    var_1.add_riders(var_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    float_0 = 2099.0
    lift_0 = module_0.Lift(float_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.go_up()
    assert lift_0.current_floor == 1
    var_1 = lift_0.add_riders(bool_0)
    var_2 = lift_0.go_down()
    assert lift_0.current_floor == 0
    var_2.get_num_riders()


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = False
    float_0 = 2099.0
    lift_0 = module_0.Lift(float_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.go_up()
    assert lift_0.current_floor == 1
    var_1 = lift_0.get_capacity()
    assert var_1 == 10
    var_2 = lift_0.call(bool_0)
    assert lift_0.current_floor == 0
    var_3 = lift_0.go_up()
    assert lift_0.current_floor == 1
    var_4 = lift_0.add_riders(bool_0)
    var_2.go_down()


@pytest.mark.xfail(strict=True)
def test_case_17():
    float_0 = -1579.0
    lift_0 = module_0.Lift(float_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.call(float_0)
    var_1 = lift_0.go_up()
    var_1.add_riders(float_0)
